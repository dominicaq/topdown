#pragma kernel CSMain

RWTexture2D<float4> Result;
StructuredBuffer<uint> LightMap;

int _chunkSize;
int upscaleFactor;
int tileSize;

[numthreads(4, 8, 1)] // 4 tiles in X, 8 tiles in Y per thread group
void CSMain(uint2 id : SV_DispatchThreadID)
{
    // Compute base tile index
    int tileX = id.x << 2;  // Each thread processes 4 tiles
    int tileY = id.y;
    int upscaleTileSize = tileSize * upscaleFactor;

    // Compute packed index (each int stores 4 tiles)
    int packedIndex = (tileY * _chunkSize + tileX) >> 2;

    // Read packed tile data (4 tiles per uint)
    uint packedData = LightMap[packedIndex];

    // Process each tile within the packed int
    for (int i = 0; i < 4; i++)
    {
        int byteOffset = i << 3;
        uint tileByte = (packedData >> byteOffset) & 0xFF;

        // Compute fog color using branch-free logic
        float4 fogColor = float4(0, 0, 0, 1) * ((tileByte & 0x80) == 0) +  // Unseen (Opaque Black)
        float4(0.5, 0.5, 0.5, 0.5) * ((tileByte & 0x40) != 0) +
        float4(0, 0, 0, 0) * ((tileByte & 0x80) != 0);    // Visible (Fully Transparent)


        // Calculate base upscale position
        int2 basePos = int2((tileX + i) * upscaleTileSize, tileY * upscaleTileSize);

        // Write upscale pixels in parallel
        for (int ux = 0; ux < upscaleTileSize; ux++)
        {
            for (int uy = 0; uy < upscaleTileSize; uy++)
            {
                Result[basePos + int2(ux, uy)] = fogColor;
            }
        }
    }
}
