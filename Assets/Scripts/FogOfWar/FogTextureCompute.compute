#pragma kernel CSMain

RWTexture2D<float4> Result;
StructuredBuffer<uint> LightMap;

int _chunkSize;
int _upscaleTileSize;

[numthreads(4, 8, 1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
    // Compute base tile index
    int tileX = id.x << 2;  // Each thread processes 4 tiles
    int tileY = id.y;

    // Compute packed index (each int stores 4 tiles)
    int packedIndex = (tileY * _chunkSize + tileX) >> 2;

    // Read packed tile data (4 tiles per uint)
    uint packedData = LightMap[packedIndex];

    // Process each tile within the packed int
    for (int i = 0; i < 4; i++)
    {
        int byteOffset = i << 3;
        uint tileByte = (packedData >> byteOffset) & 0xFF;

        // Calculate fog color based on visibility flags
        // tileByte & 0x80 is the visible flag
        // tileByte & 0x40 is the gray/partially visible flag
        float4 fogColor;

        if ((tileByte & 0x80) != 0) {
            // Fully visible - completely transparent
            fogColor = float4(0, 0, 0, 0);
        } else if ((tileByte & 0x40) != 0) {
            // Partially visible - semi-transparent gray
            fogColor = float4(0, 0, 0, 0.7);
        } else {
            // Unseen - solid black
            fogColor = float4(0, 0, 0, 1);
        }

        // Calculate base upscale position
        int2 basePos = int2((tileX + i) * _upscaleTileSize, tileY * _upscaleTileSize);

        // Write upscale pixels
        for (int ux = 0; ux < _upscaleTileSize; ux++)
        {
            for (int uy = 0; uy < _upscaleTileSize; uy++)
            {
                Result[basePos + int2(ux, uy)] = fogColor;
            }
        }
    }
}